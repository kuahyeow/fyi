<%  
if !info_request_event.nil? && info_request_event.event_type == 'response'
    incoming_message = info_request_event.incoming_message
end

# XXX disable this caching for now until we invalidate it properly - maybe do
# it at a higher level anyway.
# cache against all the parameters that there are to this partial
#cache_name = ""
#if !info_request_event.nil?
#    cache_name = cache_name + "correspondence/" + info_request_event.id.to_s
#end
#if !incoming_message.nil?
#    cache_name = cache_name + "/incoming_message/" + incoming_message.id.to_s 
#end
#if !@collapse_quotes.nil? && !@collapse_quotes
#    cache_name = cache_name + "/collapse/false"
#else
#    cache_name = cache_name + "/collapse/true" # default is true
#end
## yeuch, must be nicer way of telling cache just to use this cache_name, than
## putting it falsely in list action
#cache(:controller => 'request', :action => 'list', :extra => cache_name) do

if not incoming_message.nil?
%>
    <div class="correspondence" id="incoming-<%=incoming_message.id.to_s%>">
        <h2>
            <% if !incoming_message.safe_mail_from.nil? && incoming_message.safe_mail_from.strip != @info_request.public_body.name.strip %>
                <%=h incoming_message.safe_mail_from %><br>
            <% end %>
            <% if incoming_message.safe_mail_from.nil? || (incoming_message.mail_from_domain == @info_request.public_body.request_email_domain) %>
                <%=h @info_request.public_body.name %><br>
            <% end %>
            <br><%= simple_date(incoming_message.sent_at) %>
        </h2>

        <%= render :partial => 'bubble', :locals => { :incoming_message => incoming_message, :body => incoming_message.get_body_for_html_display(@collapse_quotes), :attachments => incoming_message.get_attachments_for_display }  %>

        <p class="event_actions">
            <% if !@user.nil? && @user.admin_page_links? %>
                <%= link_to "Admin", admin_url("request/show_raw_email/" + incoming_message.raw_email_id.to_s) %> | 
            <% end %>
            <%= link_to "Link to this", incoming_message_url(incoming_message) %> |
            <%= link_to "Reply to this message", show_response_url(:id => incoming_message.info_request.id, :incoming_message_id => incoming_message.id) + "#followup" %>

        </p>
    </div>
<%
elsif info_request_event.event_type == 'sent' || info_request_event.event_type == 'followup_sent'
    outgoing_message = info_request_event.outgoing_message
    %>
    <div class="correspondence" id="outgoing-<%=outgoing_message.id.to_s%>">
        <h2>
        <%=h @info_request.user.name %><br>
        <br><%= simple_date(info_request_event.created_at) %>
        </h2>

        <%= render :partial => 'bubble', :locals => { :body => outgoing_message.get_body_for_html_display(), :attachments => nil }  %>

        <p class="event_actions"> 
            <% if outgoing_message.status == 'ready' %>
                 <strong>Warning:</strong> This message has <strong>not yet been sent</strong> for an unknown reason.
            <% end %> 

            <!-- Can use this to get name of who followup was too, if say you
                 play with proper from display, but not sure needed
            <% if outgoing_message.message_type == 'followup' && !outgoing_message.incoming_message_followup.nil? && !outgoing_message.incoming_message_followup.safe_mail_from.nil? %>
                Follow up sent to: <%=h outgoing_message.incoming_message_followup.safe_mail_from %> 
            <% end %> 
            -->

            <%= link_to "Link to this", outgoing_message_url(outgoing_message) %> |
            <%= link_to "Send follow up", show_response_no_followup_url(:id => outgoing_message.info_request.id, :incoming_message_id => nil) + "#followup" %>
        </p>
    </div>
<% elsif [ 'resent', 'followup_resent' ].include?(info_request_event.event_type) %>
    <div class="correspondence">
        <h2>
            <%= simple_date(info_request_event.created_at) %>
        </h2>
        <p class="event_plain"> 
            Sent 
            <% if info_request_event.outgoing_message.message_type == 'initial_request' %>
                request
            <% elsif info_request_event.outgoing_message.message_type == 'followup' %>
                a follow up
            <% else %>
                <% raise "unknown message_type" %>
            <% end %>

            to <%= public_body_link(@info_request.public_body) %> again<% if not info_request_event.same_email_as_previous_send? %>, using a new contact address<% end %>.
         </p>
    </div>
<% elsif info_request_event.event_type == 'comment' 
    comment = info_request_event.comment
%>
    <%= render :partial => 'comment/single_comment', :locals => { :comment => comment } %>
<% 
end 

%>

<% # end %>

